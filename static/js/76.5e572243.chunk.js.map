{"version":3,"file":"static/js/76.5e572243.chunk.js","mappings":"yNACA,EAAuB,mBAAvB,EAAkD,oBAAlD,EAA8E,oB,SCoC9E,EAhCc,WACZ,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAIR,OAFAE,EAAAA,EAAAA,IAAgBF,GAASG,MAAK,SAAAC,GAAI,OAAIL,EAAQK,EAAZ,KAIhC,eAAIC,UAAWC,EAAf,SAEGR,EAAKS,OAAS,EACfT,EAAKU,KAAI,SAAAC,GAAK,OACZ,gBAAIJ,UAAWC,EAAf,UACGG,EAAMC,cACL,gBAAKL,UAAWC,EACdK,IAAG,yDAAoDF,EAAMC,cAC7DE,IAAI,kBAGN,uBAAG,gBAGL,yBAAG,IAAEH,EAAMI,SACX,0BAAG,uBAAG,eAAc,IAAEJ,EAAMK,eAXCL,EAAMM,GADzB,KAcR,uBAAG,qBAId,C,+LChCKC,EAAM,4CACZC,EAAAA,EAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAW,mCAAG,oGACFD,EAAAA,EAAAA,IAAA,6BAAgCD,IAD9B,cACnBG,EADmB,yBAElBA,EAASf,KAAKgB,QAAQZ,KAAI,YAC/B,MAAO,CACLO,GAFgD,EAAhBA,GAGhCM,MAHgD,EAAZA,MAKvC,KAPwB,2CAAH,qDAUXC,EAAe,mCAAG,WAAMtB,GAAN,uFACNiB,EAAAA,EAAAA,IAAA,iBAAoBjB,GAApB,OAA8BgB,EAA9B,oBADM,cACvBG,EADuB,yBAEtBA,EAASf,MAFa,2CAAH,sDAKfmB,EAAY,mCAAG,WAAMC,GAAN,uFACHP,EAAAA,EAAAA,IAAA,uBACLD,EADK,kBACQQ,EADR,2BADG,cACpBL,EADoB,yBAInBA,EAASf,KAAKgB,QAAQZ,KAAI,YAC/B,MAAO,CACLO,GAFgD,EAAhBA,GAGhCM,MAHgD,EAAZA,MAKvC,KATyB,2CAAH,sDAcZI,EAAe,mCAAG,WAAMzB,GAAN,uFACJiB,EAAAA,EAAAA,IAAA,iBACXjB,EADW,mBACOgB,EADP,2BADI,cACrBG,EADqB,yBAIpBA,EAASf,KAAKgB,QAAQZ,KAAI,YAC/B,MAAO,CACLkB,OAF0D,EAA1BA,OAGhCC,QAH0D,EAAlBA,QAIxCZ,GAJ0D,EAATA,GAMpD,KAV0B,2CAAH,sDAcbb,EAAe,mCAAG,WAAMF,GAAN,uFACRiB,EAAAA,EAAAA,IAAA,iBACXjB,EADW,mBACOgB,EADP,oBADQ,cACzBG,EADyB,yBAKxBA,EAASf,KAAKN,MALU,2CAAH,qD","sources":["webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","components/api/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Cast_list__GlWio\",\"actor\":\"Cast_actor__tWtXy\",\"image\":\"Cast_image__mOsuM\"};","import { getMovieCredits } from 'components/api/api';\nimport { useParams } from 'react-router-dom';\nimport { useState } from 'react';\nimport css from './Cast.module.css'\n\n const Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  getMovieCredits(movieId).then(data => setCast(data));\n\n  return (\n\n    <ul className={css.list}>\n\n      {cast.length > 0 ? (\n      cast.map(actor => (\n        <li className={css.actor} key={actor.id}>\n          {actor.profile_path ? (\n            <img className={css.image}\n              src={`https://image.tmdb.org/t/p/w300_and_h450_bestv2${actor.profile_path}`}\n              alt=\"actor poster\"\n            ></img>\n          ) : (\n            <p>No picture</p>\n          )}\n\n          <p> {actor.name}</p>\n          <p><b>Character:</b> {actor.character}</p>\n        </li>\n      ))) : <p>Brak aktor√≥w</p>}\n\n    </ul>\n  );\n};\n\n\nexport default Cast;","import axios from 'axios';\n\nconst KEY = '?api_key=6a9a83cfb600dbd7747b45c5dc18162e';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrending = async () => {\n  const response = await axios.get(`/trending/movie/day${KEY}`);\n  return response.data.results.map(({ id, title }) => {\n    return {\n      id,\n      title,\n    };\n  });\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await axios.get(`/movie/${movieId}${KEY}&language=en-US`);\n  return response.data;\n};\n\nexport const searchMovies = async searchValue => {\n  const response = await axios.get(\n    `/search/movie${KEY}&query=${searchValue}&language=en-US&page=1`\n  );\n  return response.data.results.map(({ id, title }) => {\n    return {\n      id,\n      title,\n    };\n  });\n};\n\n\n\nexport const getMovieReviews = async movieId => {\n    const response = await axios.get(\n      `/movie/${movieId}/reviews${KEY}&language=en-US&page=1`\n    );\n    return response.data.results.map(({ author, content, id }) => {\n      return {\n        author,\n        content,\n        id,\n      };\n    });\n  };\n  \n\n  export const getMovieCredits = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits${KEY}&language=en-US`\n  );\n\n  return response.data.cast\n  // return response.data.results.map(({ name, character, profile_path, id }) => {\n  //   return {\n  //     name,\n  //     character,\n  //     profile_path,\n  //     id,\n  //   };\n  // });\n};\n"],"names":["useState","cast","setCast","movieId","useParams","getMovieCredits","then","data","className","css","length","map","actor","profile_path","src","alt","name","character","id","KEY","axios","getTrending","response","results","title","getMovieDetails","searchMovies","searchValue","getMovieReviews","author","content"],"sourceRoot":""}